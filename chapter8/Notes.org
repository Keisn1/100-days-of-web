* JavaScript
** How to run
*** in the browser
#+begin_src js
  function hello(name) {
      return 'Hello ' + name;
  }

  console.log(hello('bob'));
#+end_src
- need to have a html template in place
- importing script and calling it
  #+begin_src html
    <body>
      <!-- import any module -->
      <script type="text/javascript" src="hello_world.js"></script>
      <script type="text/javascript">
        // you can write  JS in script tags as well
        let name = 'bob';
        // Imported Hello.js making the hello function available in namespace
        console.log(hello(name))
      </script>
    </body>
  #+end_src
- click inspect and go to console, you'll have the function available
*** Server Side - Node.js
- Node.js
  #+begin_src shell
    node hello.js
  #+end_src
*** IDE
- probably with a plugin

** Printing
- console or alert
#+begin_src js
  console.log("Hello")
  alert("Alert")
#+end_src

** var and let
- var is global
- var outdated, best use is let
- let is block scoped
- const for constant
#+begin_src js
  var name = 'bob';
  // let is block scoped
  let name1 = 'bob';
  const minAge = 18;
#+end_src

** Type Casting
- extremely permissive, makes a lot implicitely

** Primitives
- Boolean (true and false)
- null (None in Python)
- undefined: top-level property whose value is not defined
- Number: includes both ints and floats
- string
- Symbol: a data type whose instances are unique and immutable

** Objects
- dict to classes

** Type casting
- JavaScript is extremely permissive when adding types together

** Arrays
- look at script
#+begin_src js
  names = ['bob', 'alice', 'julian'];
  names.length
  // inplace operations
  names.sort();
  names.reverse();
  names.slice(1, 3);
  names.push('Sarah');
  names.pop()
  names.shift()
#+end_src
** For loop
- like C
#+begin_src js
  for(let i=0; i<names.length; i++) {
      console.log(names[i])
  }
  for(let name of names) {
      console.log(name)
  }
#+end_src
** Comparison and Conditionals
- usual if and ternary
  #+begin_src js
    let my_age = 18
    const min_age = 12
    if(my_age >= minAge) {
        console.log("I can drive")
    } else {
        console.log("Nope, not allowed")
    }
    (my_age >= minAge) ? console.log('can drive') : console.log('not allowed') // ternary condition
  #+end_src
- else if
  #+begin_src js
    names = ['bob', 'julian', 'mike', 'berta', 'quinton', 'tim', 'oliver']
    for(let name of names) {
        if(name.startsWith('b')) {
            console.log(name)
        } else if (name.startsWith('q')){
            console.log(name + ' starts with q')
            break;
        }
    }
  #+end_src
** Functions
- first class citizens
  - can be assigned to variables, etc.
- they have one or more expressions (side effects) and can optionally return a value
- Each function creates a new scope
- can be nested (clojures) and can call themselves (recursion)
- Can have one or more parameters (definition) / arguments (when called)
#+begin_src js
  function print_arguments() {
      for(let arg of arguments){
          console.log(arg);
      }
  }
  function hello(name) {
      if(name === undefined) name = 'stranger'; // checks for equality and same type
      console.log('Hello ' + name);
  }
  function hello_1(name='stranger') { // default arguments
      console.log(`Hello ${name}`);
  }
  let hello_2 = (name='stranger') => console.log(`Hello ${name}`)
  hello()
  hello_1()
  hello_2()
#+end_src
- arguments is argument in every argument
- 3x= (===) checks for equality and same type
- default arguments
- arrow functions with =>

** Objects
- everything is an object
- can define one using an object literal
#+begin_src js
  bite = {'number': 1, 'title': 'sum of numbers', 'points': 2}
  bite
  bite.number
  bite["number"]
  bite.str = function(){console.log('Bite: ${this.number} - ${this.title} - ${this.points}')}
#+end_src
- can add methods
- copied by reference
* Day 2
- Did the controlflow exercise
  Remarks:
  - ParseInt and Prompt are only default imports in browser, don't know yet how
    to get them in node i.e.
  - if you prompt directly without having opened the console, you don't see the
    updates inside the console
    - therefore needed to rewrite even the solution, putting the solution inside
      a function and execute the function inside the console
  - JavaScript is executing even functions, where you don't give arguments, it
    just tries
    - so I accidentally executed the guessing function without maxAttempts
      argument, it just assumed maxAttempts to be NaN inside the comparison
      (attempts == maxAttempts)
- Have not yet done the other exercises
* Day 3
** Document Object Model (DOM)
- platform- and language-neutral interface
- will allow programs and scripts to dynamically access and update the content,
  structure and style of a document
- W3CDOM and WHATWG standards (browser may extend that)
-
** How
- *Tree of objects*
  - Document
    - Root
      - head
        - title
        - Text
      - body
        - different tags (a, href, t, h1)
          - texts

- JS can change
  - HTML elements and attributes
  - remove existing elements and attributes
  - CSS styles
  - can react to all existing HTML events
  - can create new HTML events
** Demo
- Targeting elements (getElementByTagName, getElementByClassName, getElementById)
- write new content to the page unsing innerHTML
- append/remove elements with appendChild/removeChild
- add color to text using element.style.color
- add a click event (addEventListener) and open.window
-
*** Remarks
- need to cast HTML Collection objects to an array, so you can do something
  programmatically with them (i.e. list)
- there are *silent errors*
  - that means that you might have an error but it still compiles and you don't
    see it immediately

** Debugging in JavaScript
- go to Sources
- in example JS is inline
  - setting breakpoint after calculation
  - enter in debugger, and you have another console
  - now you can access variables

** Common JS gotchas
- JavaScript was designed in 10 days
*** Global Variables
- use let and const
*** C-style block syntax but not its block scope
- no information hiding
*** End of line semicolons are optional and misuse is "passed silently"
*** 2 Equality operators
== ... only value
=== ... value and type
*** 2 ways to express undefined or empty variables
- null and undefined

** Resources
1. Javascript in 14 minutes
2. w3schools JS Tutorial
3. Mozilla DevDocs (/LEARN/JavaScript)
4. Books
   - you don't know JS
   - JS the good parts
   - eloquent JavaScript
5. Specializations
   - Serverside: Node, TypeScript
   - Frameworks: jQuery, Angular, React, Vue
6. Can I use.com
   - if browser support certain features
